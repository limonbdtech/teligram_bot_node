// bot.js
const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");
const Sentiment = require("sentiment");
const cron = require("node-cron");
const config = require("./config"); // BOT_TOKEN + WEBHOOK_URL
const yahooFinance = require('yahoo-finance2').default;
const axios = require('axios');

const app = express();
app.use(bodyParser.json());

// Initialize bot (no polling)
const bot = new TelegramBot(config.BOT_TOKEN);
const sentiment = new Sentiment();

// ========================
// Existing wordlist / Police Mode code unchanged
// ========================
const wordlist = [
  'ржЪрзБржжрж┐','ржЪрзЛржж','ржорж╛ржЧрзА','рж╣рж╛рж░рж╛ржорж┐','ржЧрж╛ржзрж╛','ржмрзЛржХрж╛','ржЪрзБрждржорж╛рж░рж╛ржирж┐','ржЦрж╛ржиржХрж┐рж░ржкрзЛрж▓рж╛','рж╢рзБрзЯрзЛрж░',
  'рж╢рж╛рж▓рж╛','ржорж╛ржжрж╛рж░ржЪрзЛржж','ржмрж╛ржкржЪрзЛржж','ржЪрзБрждрж┐рзЯрж╛','chudi','chod','magi','harami','gadha','boka',
  'chutmarani','khanakirpola','shuar','shala','madarchod','bapchod','chutiya','fuck',
  'motherfucker','shit','bitch','asshole','bastard','idiot','fraud','cheat',
  'looter','conman','admin fraud','fake','thief',
  'ржПржбржорж┐ржи ржЪрзБржжрж┐','ржПржбржорж┐ржи ржЪрзЛрж░','ржПржбржорж┐ржи ржЦрж╛рж░рж╛ржк','this is a scam','admin fraud',
  'Pulu Marma ржмрж╛ржЯржкрж╛рж░','Pulu Marma ржЪрзЛрж░','pulu marma ржЪрзЛрж░','pulu marma ржПржХржЬржи ржмрж╛ржЯржкрж╛рж░',
  'ржкрзБрж▓рзБ ржорж╛рж░ржорж╛ ржЪрзЛрж░','ржкрзБрж▓рзБ ржорж╛рж░ржорж╛ ржмрж╛ржЯржкрж╛рж░','ржкрзБрж▓рзБ ржорж╛рж░ржорж╛ ржорж╛ржирзБрж╖рзЗрж░ ржЯрж╛ржХрж╛ ржорзЗрж░рзЗ ржЦрж╛рзЯ',
  'INNER CIRCLE 9 ржПржЗ ржЧрзНрж░рзБржк ржПржбржорж┐ржи @PuluMarma Mushasi Miyamoto ржПржХржЯрж╛ ржкрзНрж░рждрж╛рж░ржХ ржкрзЗржЗржб ржХрзЛрж░рзНрж╕ ржХрж░рж╛ржирзЛрж░ ржирж╛ржорзЗ ржорж╛ржирзБрж╖рзЗрж░ ржерзЗржХрзЗ ржЯрж╛ржХрж╛ ржорзЗрж░рзЗ ржЦрж╛ржпрж╝',
  'Pulu рж╕рзЗ ржирж┐ржЬрзЗржУ ржЯрзНрж░рзЗржбрж┐ржВ ржкрж╛рж░рзЗ ржирж╛ ржЕржержЪ ржкрзЗржЗржб ржХрзЛрж░рзНрж╕ ржЪрж╛рж▓рзБ ржХрж░рзЗ ржлрзЗрж▓рж╕рзЗ',
  'рж╕ржмрж╛ржЗ ржнрзБржпрж╝рж╛ ржорзЗржирзНржЯрж░ PULU рж╣ржЗрждрзЗ рж╕рж╛ржмржзрж╛ржи',
  'ржУрж░ ржЧрзНрж░рзБржкрзЗ 10-12 ржЯрж╛ ржжрж╛рж▓рж╛рж▓ ржЖржЫрзЗ',
  'ржУрж░ ржжрж╛рж▓рж╛рж▓ржжрзЗрж░ ржХржерж╛ржпрж╝ ржмрж┐ржнрзНрж░рж╛ржирзНржд рж╣ржмрзЗржи ржирж╛',
  'ржпрзЗрж╕ржм ANALYSIS ржжрзЗржпрж╝ ржмрзЗрж╢рж┐рж░ржнрж╛ржЧржЗ SL рж╣рж┐ржЯ ржЦрж╛ржпрж╝',
  'Pulu ржпрзЗ ржЯрзНрж░рзЗржбрж┐ржВ ржкрж╛рж░рзЗ ржУржХрзЗ ржПржХржЯрж╛ ржкрзНрж░ржорж╛ржг ржжрж┐рждрзЗ ржмрж▓рзЗржи рждрзЛ'
];
const userOffenses = {};

// Set webhook
bot.setWebHook(`${config.WEBHOOK_URL}/bot${config.BOT_TOKEN}`);

// Webhook route
app.post(`/bot${config.BOT_TOKEN}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});



// -------------------------------
// Debug: ржжрзЗржЦрж╛рж░ ржЬржирзНржп chat.id
// -------------------------------
bot.on("message", (msg) => {
    console.log("Chat ID:", msg.chat.id);
});

// ========================
// рзз. ржирждрзБржи рж╕ржжрж╕рзНржп рж╕рзНржмрж╛ржЧрждржо
// ========================
bot.on("new_chat_members", (msg) => {
    msg.new_chat_members.forEach(member => {
        bot.sendMessage(msg.chat.id, `Welcome to the group ЁЯОЙ ${member.first_name}`);
    });
});

// ========================
// рзи. ржЯрж╛ржЗржо-ржнрж┐рждрзНрждрж┐ржХ ржорзЗрж╕рзЗржЬ (cron)
// ========================

// рж╕ржХрж╛рж▓ рж╢рзБржнрзЗржЪрзНржЫрж╛ 08:00
cron.schedule('0 8 * * *', () => {
    bot.sendMessage(config.GROUP_CHAT_ID, 'рж╕рзБржкрзНрж░ржнрж╛ржд! ЁЯМЮ');
});

// рж░рж╛ржд рж╢рзБржнрзЗржЪрзНржЫрж╛ 21:00
cron.schedule('0 21 * * *', () => {
    bot.sendMessage(config.GROUP_CHAT_ID, 'рж╢рзБржн рж░рж╛рждрзНрж░рж┐! ЁЯМЩ');
});

// рж╢рзБржХрзНрж░ржмрж╛рж░ ржЬрзБржорж╛ ржорзЛржмрж╛рж░ржХ 09:00
cron.schedule('0 9 * * 5', () => {
    bot.sendMessage(config.GROUP_CHAT_ID, 'ржЬрзБржорж╛ ржорзЛржмрж╛рж░ржХ! ЁЯХМ');
});

// ========================
// ========================
// рзй. Market Update (Forex + US100 + BTC + Bank Holiday)
// ========================


async function sendMarketUpdate() {
  try {
    const now = new Date();
    const hour = now.getUTCHours() + 6; // BD Time (UTC+6)
    const day = now.getDay(); // 0=Sunday, 6=Saturday

    let forexMsg = "";
    let us100Msg = "";
    let btcMsg = "";

    // -------- Bank Holiday & Weekend Check --------
    let isWeekend = day === 0 || day === 6;
    // ржпржжрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝, Finnhub ржмрж╛ ржЕржирзНржп API ржжрж┐рзЯрзЗ ржмрзНржпрж╛ржЩрзНржХ рж╣рж▓рж┐ржбрзЗ ржЪрзЗржХ ржХрж░рж╛ ржпрж╛ржмрзЗ
    let isBankHoliday = false; // temporary false, manual/automatic later

    // -------- Forex (USD/EUR, USD/GBP) --------
    if (!isWeekend && !isBankHoliday && hour >= 8 && hour < 24) {
      try {
        const eurusd = await yf.quote('EURUSD=X'); // EUR/USD
        const gbpusd = await yf.quote('GBPUSD=X'); // GBP/USD
        forexMsg = `USD/EUR: ${eurusd.regularMarketPrice.toFixed(4)}\nUSD/GBP: ${gbpusd.regularMarketPrice.toFixed(4)}`;
      } catch {
        forexMsg = "тЪая╕П Forex Market Closed ржмрж╛ API Error";
      }
    } else {
      forexMsg = "ЁЯУв Forex Market Closed (Weekend / Bank Holiday / Off Hours)";
    }

    // -------- US100 (Nasdaq) --------
    if (!isWeekend && !isBankHoliday && hour >= 8 && hour < 24) {
      try {
        const us100 = await yf.quote('^NDX'); // US100 Index
        if (us100.regularMarketPrice) {
          us100Msg = `US100: ${us100.regularMarketPrice}`;
        } else {
          us100Msg = "ЁЯУв US100 Data Not Available (Maybe Bank Holiday)";
        }
      } catch {
        us100Msg = "тЪая╕П US100 Data Not Available (API Error)";
      }
    } else {
      us100Msg = "ЁЯУв US100 Market Closed (Weekend / Bank Holiday / Off Hours)";
    }

    // -------- Bitcoin 24/7 --------
    try {
      const btc = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd');
      const btcPrice = btc.data.bitcoin.usd;
      btcMsg = `тВ┐ BTC/USD: ${btcPrice}`;
    } catch {
      btcMsg = "тЪая╕П BTC Data Fetch Error";
    }

    // -------- Final Message --------
    const message = `ЁЯдЦ Message Police Bot:\nЁЯУК **Market Update**\n\n${forexMsg}\n${us100Msg}\n${btcMsg}\nЁЯХТ Updated: ${now.toLocaleString('en-US', { timeZone: 'Asia/Dhaka' })}`;
    
    // Send to Telegram
    bot.sendMessage(config.GROUP_CHAT_ID, message, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('Market Update Error:', error.message);
  }
}

// ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯрзЗ ржЯрзЗрж╕рзНржЯрж┐ржВ ржЬржирзНржп
// cron.schedule('*/5 * * * *', sendMarketUpdate);

// ржкрж░рзЗ production ржП рзз ржШржирзНржЯрж╛ interval ржХрж░рждрзЗ ржЪрж╛ржЗрж▓рзЗ:
// cron.schedule('0 * * * *', sendMarketUpdate);
// рзк. Message handler (existing Police Mode)
// ========================
bot.on("message", async (msg) => {
  if (!msg.text) return;

  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name || userId;
  const text = msg.text;

  const cleanText = text.replace(/[.,!?;:()\[\]{}"]/g, " ").trim().toLowerCase();
  const detectedWords = wordlist.filter(word => cleanText.includes(word.toLowerCase()));
  const sentimentScore = sentiment.analyze(cleanText).score;

  if (detectedWords.length > 0 || sentimentScore < -2) {
    await bot.deleteMessage(chatId, msg.message_id).catch(() => {});
    userOffenses[userId] = (userOffenses[userId] || 0) + 1;
    await bot.banChatMember(chatId, userId).catch(() => {});

    let reason = [];
    if (detectedWords.length > 0) reason.push(`ЁЯзи ржЧрж╛рж▓рж┐рж░ рж╢ржмрзНржж: ${detectedWords.join(", ")}`);
    if (sentimentScore < -2) reason.push(`ЁЯШб ржирзЗрждрж┐ржмрж╛ржЪржХ ржорзЗрж╕рзЗржЬ (Score: ${sentimentScore})`);

    const banMessage =
      `ЁЯЪФЁЯСо ржкрзБрж▓рж┐рж╢рзЗрж░ ржЬрж░рзБрж░рж┐ ржЕржнрж┐ржпрж╛ржи ЁЯСоЁЯЪФ\n\n` +
      `ЁЯФЧ ржЕржкрж░рж╛ржзрзА: @${username}\n` +
      `ЁЯУМ ржЕржнрж┐ржпрзЛржЧ: ${reason.join(" | ")}\n\n` +
      `тЪЦя╕П рж░рж╛ржпрж╝: рж╕рзНржерж╛ржпрж╝рзА ржХрж╛рж░рж╛ржжржгрзНржб (BAN) тЫФ\n` +
      `ЁЯЪУ ржирзЛржЯ: ржЧрзНрж░рзБржкрзЗ ржЧрж╛рж▓рж┐ ржжрж┐рж▓рзЗ ржкрзБрж▓рж┐рж╢ ржПрж╕рзЗ ржзрж░рзЗ ржирж┐ржпрж╝рзЗ ржпрж╛ржпрж╝ ЁЯдн`;

    await bot.sendMessage(chatId, banMessage);
  }
});

// Home route
app.get('/', (req, res) => {
  res.send('Bot is running тЬЕ');
});

// Start Express server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ЁЯЪА Server running on port ${PORT}`);
});